-- =====================================================================
-- Oracle SQL (12c+) – Esquema sencillo y funcional
-- Dominios de Solicitudes, con lo mínimo para operar
-- =====================================================================

-- =========================
-- Tablas de referencia simple
-- =========================
CREATE TABLE ROLE_CATALOG (
  CODE VARCHAR2(20) PRIMARY KEY
);
INSERT INTO ROLE_CATALOG (CODE) VALUES ('ADMIN');
INSERT INTO ROLE_CATALOG (CODE) VALUES ('RESPONSABLE');
INSERT INTO ROLE_CATALOG (CODE) VALUES ('USUARIO');

CREATE TABLE PRIORITY_CATALOG (
  CODE VARCHAR2(10) PRIMARY KEY
);
INSERT INTO PRIORITY_CATALOG (CODE) VALUES ('BAJA');
INSERT INTO PRIORITY_CATALOG (CODE) VALUES ('MEDIA');
INSERT INTO PRIORITY_CATALOG (CODE) VALUES ('ALTA');

CREATE TABLE STATE_CATALOG (
  CODE VARCHAR2(15) PRIMARY KEY
);
INSERT INTO STATE_CATALOG (CODE) VALUES ('NUEVA');
INSERT INTO STATE_CATALOG (CODE) VALUES ('ASIGNADA');
INSERT INTO STATE_CATALOG (CODE) VALUES ('EN_REVISION');
INSERT INTO STATE_CATALOG (CODE) VALUES ('APROBADA');
INSERT INTO STATE_CATALOG (CODE) VALUES ('DENEGADA');
INSERT INTO STATE_CATALOG (CODE) VALUES ('CERRADA');

CREATE TABLE DECISION_CATALOG (
  CODE VARCHAR2(15) PRIMARY KEY
);
INSERT INTO DECISION_CATALOG (CODE) VALUES ('APROBADA');
INSERT INTO DECISION_CATALOG (CODE) VALUES ('DENEGADA');

-- =========================
-- Usuarios
-- =========================
CREATE TABLE APP_USER (
  ID               NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  EMAIL            VARCHAR2(255) NOT NULL UNIQUE,
  FULL_NAME        VARCHAR2(200) NOT NULL,
  ROLE_CODE        VARCHAR2(20) DEFAULT 'USUARIO' NOT NULL,
  IS_ACTIVE        NUMBER(1) DEFAULT 1 NOT NULL CHECK (IS_ACTIVE IN (0,1)),
  CREATED_AT       TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  UPDATED_AT       TIMESTAMP
);
ALTER TABLE APP_USER
  ADD CONSTRAINT FK_APP_USER_ROLE
  FOREIGN KEY (ROLE_CODE) REFERENCES ROLE_CATALOG(CODE);

-- =========================
-- Solicitudes
-- =========================
CREATE TABLE REQUEST (
  ID                 NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  FOLIO              VARCHAR2(32) UNIQUE, -- si no lo llenas, lo puedes generar en app
  TITLE              VARCHAR2(300) NOT NULL,
  DESCRIPTION        VARCHAR2(2000),
  PRIORITY_CODE      VARCHAR2(10) DEFAULT 'MEDIA' NOT NULL,
  STATE_CODE         VARCHAR2(15) DEFAULT 'NUEVA' NOT NULL,
  CREATED_BY_ID      NUMBER NOT NULL,
  CURRENT_OWNER_ID   NUMBER,
  CREATED_AT         TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  UPDATED_AT         TIMESTAMP
);
ALTER TABLE REQUEST
  ADD CONSTRAINT FK_REQUEST_PRIORITY
  FOREIGN KEY (PRIORITY_CODE) REFERENCES PRIORITY_CATALOG(CODE);
ALTER TABLE REQUEST
  ADD CONSTRAINT FK_REQUEST_STATE
  FOREIGN KEY (STATE_CODE) REFERENCES STATE_CATALOG(CODE);
ALTER TABLE REQUEST
  ADD CONSTRAINT FK_REQUEST_CREATED_BY
  FOREIGN KEY (CREATED_BY_ID) REFERENCES APP_USER(ID);
ALTER TABLE REQUEST
  ADD CONSTRAINT FK_REQUEST_CURR_OWNER
  FOREIGN KEY (CURRENT_OWNER_ID) REFERENCES APP_USER(ID);

CREATE INDEX IDX_REQUEST_STATE_PRIO_CREATED
  ON REQUEST (STATE_CODE, PRIORITY_CODE, CREATED_AT);
CREATE INDEX IDX_REQUEST_CURR_OWNER ON REQUEST (CURRENT_OWNER_ID);

-- =========================
-- Asignaciones (histórico)
-- =========================
CREATE TABLE REQUEST_ASSIGNMENT (
  ID             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  REQUEST_ID     NUMBER NOT NULL,
  ASSIGNEE_ID    NUMBER NOT NULL,
  ACTIVE         NUMBER(1) DEFAULT 1 NOT NULL CHECK (ACTIVE IN (0,1)),
  NOTE           VARCHAR2(500),
  CREATED_AT     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);
ALTER TABLE REQUEST_ASSIGNMENT
  ADD CONSTRAINT FK_ASSGN_REQUEST
  FOREIGN KEY (REQUEST_ID) REFERENCES REQUEST(ID) ON DELETE CASCADE;
ALTER TABLE REQUEST_ASSIGNMENT
  ADD CONSTRAINT FK_ASSGN_USER
  FOREIGN KEY (ASSIGNEE_ID) REFERENCES APP_USER(ID);

CREATE INDEX IDX_ASSGN_REQUEST_CREATED ON REQUEST_ASSIGNMENT (REQUEST_ID, CREATED_AT);
CREATE INDEX IDX_ASSGN_ASSIGNEE_ACTIVE ON REQUEST_ASSIGNMENT (ASSIGNEE_ID, ACTIVE);

-- Asegurar UNA asignación activa por request con índice basado en función
-- Solo se aplica cuando ACTIVE = 1 (los NULL no rompen la unicidad)
CREATE UNIQUE INDEX UQ_ACTIVE_ASSIGNMENT
  ON REQUEST_ASSIGNMENT (CASE WHEN ACTIVE = 1 THEN REQUEST_ID END);



-- =========================
-- Comentarios
-- =========================
CREATE TABLE REQUEST_COMMENT (
  ID             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  REQUEST_ID     NUMBER NOT NULL,
  AUTHOR_ID      NUMBER NOT NULL,
  MESSAGE        VARCHAR2(2000) NOT NULL,
  CREATED_AT     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);
ALTER TABLE REQUEST_COMMENT
  ADD CONSTRAINT FK_COMMENT_REQUEST
  FOREIGN KEY (REQUEST_ID) REFERENCES REQUEST(ID) ON DELETE CASCADE;
ALTER TABLE REQUEST_COMMENT
  ADD CONSTRAINT FK_COMMENT_AUTHOR
  FOREIGN KEY (AUTHOR_ID) REFERENCES APP_USER(ID);
CREATE INDEX IDX_COMMENT_REQUEST_CREATED ON REQUEST_COMMENT (REQUEST_ID, CREATED_AT);

-- =========================
-- Decisiones
-- =========================
CREATE TABLE REQUEST_DECISION (
  ID             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  REQUEST_ID     NUMBER NOT NULL,
  ACTOR_ID       NUMBER NOT NULL,
  DECISION_CODE  VARCHAR2(15) NOT NULL,
  REASON         VARCHAR2(1000),
  CREATED_AT     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);
ALTER TABLE REQUEST_DECISION
  ADD CONSTRAINT FK_DECISION_REQUEST
  FOREIGN KEY (REQUEST_ID) REFERENCES REQUEST(ID) ON DELETE CASCADE;
ALTER TABLE REQUEST_DECISION
  ADD CONSTRAINT FK_DECISION_ACTOR
  FOREIGN KEY (ACTOR_ID) REFERENCES APP_USER(ID);
ALTER TABLE REQUEST_DECISION
  ADD CONSTRAINT FK_DECISION_CODE
  FOREIGN KEY (DECISION_CODE) REFERENCES DECISION_CATALOG(CODE);
CREATE INDEX IDX_DECISION_REQUEST_CREATED ON REQUEST_DECISION (REQUEST_ID, CREATED_AT);

-- =========================
-- Adjuntos
-- =========================
CREATE TABLE REQUEST_ATTACHMENT (
  ID               NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  REQUEST_ID       NUMBER NOT NULL,
  UPLOADED_BY_ID   NUMBER NOT NULL,
  FILE_NAME        VARCHAR2(300) NOT NULL,
  FILE_URI         VARCHAR2(1000) NOT NULL, -- puedes guardar S3 presigned/base o URL pública
  MIME_TYPE        VARCHAR2(100),
  SIZE_BYTES       NUMBER,
  CREATED_AT       TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);
ALTER TABLE REQUEST_ATTACHMENT
  ADD CONSTRAINT FK_ATTACH_REQUEST
  FOREIGN KEY (REQUEST_ID) REFERENCES REQUEST(ID) ON DELETE CASCADE;
ALTER TABLE REQUEST_ATTACHMENT
  ADD CONSTRAINT FK_ATTACH_USER
  FOREIGN KEY (UPLOADED_BY_ID) REFERENCES APP_USER(ID);
CREATE INDEX IDX_ATTACHMENT_REQUEST_CREATED ON REQUEST_ATTACHMENT (REQUEST_ID, CREATED_AT);

-- =========================
-- Notificaciones (opcional sencillo)
-- =========================
CREATE TABLE NOTIFICATION (
  ID               NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  REQUEST_ID       NUMBER,
  CHANNEL          VARCHAR2(10),     -- 'EMAIL','PUSH','SMS'
  STATUS           VARCHAR2(12),     -- 'PENDING','SENT','FAILED',...
  RECIPIENT        VARCHAR2(255),
  TEMPLATE_CODE    VARCHAR2(50),
  PAYLOAD_JSON     CLOB,             -- JSON en texto; si tienes 21c usa JSON nativo
  SCHEDULED_AT     TIMESTAMP,
  SENT_AT          TIMESTAMP,
  ERROR_MESSAGE    VARCHAR2(1000),
  CREATED_AT       TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);
ALTER TABLE NOTIFICATION
  ADD CONSTRAINT FK_NOTIFICATION_REQUEST
  FOREIGN KEY (REQUEST_ID) REFERENCES REQUEST(ID);
CREATE INDEX IDX_NOTIFICATION_STATUS_SCHED ON NOTIFICATION (STATUS, SCHEDULED_AT);